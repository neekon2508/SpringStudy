import org.springframework.boot.gradle.plugin.SpringBootPlugin

description 'Chapter 09: Spring Transaction Management!'

// we are using Spring Boot dependency management, but we configure Spring MVC in the classic manner - explicitly, with no Spring Boot "magic"
dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

dependencies {
    implementation 'org.springframework:spring-orm'
    implementation 'org.springframework:spring-context'

    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationVersion"

    implementation "com.zaxxer:HikariCP:$hikariVersion"
    implementation "org.mariadb.jdbc:mariadb-java-client:$mariadbClientVersion"
    implementation "org.hibernate.orm:hibernate-core:$hibernateVersion"

    testImplementation 'org.springframework:spring-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation "org.testcontainers:mariadb:$testcontainersVersion"
    testImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
}

tasks.register('fatJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    /*  Gradle Fat jars with multiple dependencies are affected by the same bug: https://issues.apache.org/jira/browse/MASSEMBLY-360 this statement fixes it */
    manifest {
        attributes "Main-Class": "com.apress.prospring6.nine.Chapter9Demo",
                "Created-By": "Iuliana Cosmina",
                "Specification-Title": "Pro Spring 6 - Chapter 9"
    }
    from {configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}